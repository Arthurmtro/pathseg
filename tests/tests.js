// LayoutTests/svg/dom/script-tests/path-segments.js
QUnit.test("Path segment types", function(assert) {
    var path = document.createElementNS("http://www.w3.org/2000/svg", "path");

    assert.equal(SVGPathSeg.PATHSEG_UNKNOWN, "0");
    assert.equal(SVGPathSeg.PATHSEG_CLOSEPATH, "1");
    assert.equal(SVGPathSeg.PATHSEG_MOVETO_ABS, "2");
    assert.equal(SVGPathSeg.PATHSEG_MOVETO_REL, "3");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_ABS, "4");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_REL, "5");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "6");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "7");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "8");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "9");
    assert.equal(SVGPathSeg.PATHSEG_ARC_ABS, "10");
    assert.equal(SVGPathSeg.PATHSEG_ARC_REL, "11");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "12");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "13");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "14");
    assert.equal(SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "15");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "16");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "17");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "18");
    assert.equal(SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "19");

    assert.equal(path.createSVGPathSegClosePath().pathSegType, SVGPathSeg.PATHSEG_CLOSEPATH);
    assert.equal(path.createSVGPathSegClosePath().pathSegTypeAsLetter, "z");
    assert.equal(path.createSVGPathSegMovetoAbs(1, 2).pathSegType, SVGPathSeg.PATHSEG_MOVETO_ABS);
    assert.equal(path.createSVGPathSegMovetoAbs(1, 2).pathSegTypeAsLetter, "M");
    assert.equal(path.createSVGPathSegMovetoAbs(1, 2).x, "1");
    assert.equal(path.createSVGPathSegMovetoAbs(1, 2).y, "2");
    assert.equal(path.createSVGPathSegMovetoRel(1, 2).pathSegType, SVGPathSeg.PATHSEG_MOVETO_REL);
    assert.equal(path.createSVGPathSegMovetoRel(1, 2).pathSegTypeAsLetter, "m");
    assert.equal(path.createSVGPathSegMovetoRel(1, 2).x, "1");
    assert.equal(path.createSVGPathSegMovetoRel(1, 2).y, "2");
    assert.equal(path.createSVGPathSegLinetoAbs(1, 2).pathSegType, SVGPathSeg.PATHSEG_LINETO_ABS);
    assert.equal(path.createSVGPathSegLinetoAbs(1, 2).pathSegTypeAsLetter, "L");
    assert.equal(path.createSVGPathSegLinetoAbs(1, 2).x, "1");
    assert.equal(path.createSVGPathSegLinetoAbs(1, 2).y, "2");
    assert.equal(path.createSVGPathSegLinetoRel(1, 2).pathSegType, SVGPathSeg.PATHSEG_LINETO_REL);
    assert.equal(path.createSVGPathSegLinetoRel(1, 2).pathSegTypeAsLetter, "l");
    assert.equal(path.createSVGPathSegLinetoRel(1, 2).x, "1");
    assert.equal(path.createSVGPathSegLinetoRel(1, 2).y, "2");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).pathSegType, SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS);
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).pathSegTypeAsLetter, "C");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).x, "1");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).y, "2");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).x1, "3");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).y1, "4");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).x2, "5");
    assert.equal(path.createSVGPathSegCurvetoCubicAbs(1, 2, 3, 4, 5, 6).y2, "6");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).pathSegType, SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL);
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).pathSegTypeAsLetter, "c");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).x, "1");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).y, "2");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).x1, "3");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).y1, "4");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).x2, "5");
    assert.equal(path.createSVGPathSegCurvetoCubicRel(1, 2, 3, 4, 5, 6).y2, "6");
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).pathSegType, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS);
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).pathSegTypeAsLetter, "Q");
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).x, "1");
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).y, "2");
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).x1, "3");
    assert.equal(path.createSVGPathSegCurvetoQuadraticAbs(1, 2, 3, 4).y1, "4");
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).pathSegType, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL);
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).pathSegTypeAsLetter, "q");
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).x, "1");
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).y, "2");
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).x1, "3");
    assert.equal(path.createSVGPathSegCurvetoQuadraticRel(1, 2, 3, 4).y1, "4");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).pathSegType, SVGPathSeg.PATHSEG_ARC_ABS);
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).pathSegTypeAsLetter, "A");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).x, "1");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).y, "2");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).r1, "3");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).r2, "4");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).angle, "5");
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).largeArcFlag, false);
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, true, false).largeArcFlag, true);
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, false).sweepFlag, false);
    assert.equal(path.createSVGPathSegArcAbs(1, 2, 3, 4, 5, false, true).sweepFlag, true);
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).pathSegType, SVGPathSeg.PATHSEG_ARC_REL);
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).pathSegTypeAsLetter, "a");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).x, "1");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).y, "2");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).r1, "3");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).r2, "4");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).angle, "5");
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).largeArcFlag, false);
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, true, false).largeArcFlag, true);
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, false).sweepFlag, false);
    assert.equal(path.createSVGPathSegArcRel(1, 2, 3, 4, 5, false, true).sweepFlag, true);
    assert.equal(path.createSVGPathSegLinetoHorizontalAbs(1).pathSegType, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS);
    assert.equal(path.createSVGPathSegLinetoHorizontalAbs(1).pathSegTypeAsLetter, "H");
    assert.equal(path.createSVGPathSegLinetoHorizontalAbs(1).x, "1");
    assert.equal(path.createSVGPathSegLinetoHorizontalRel(1).pathSegType, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL);
    assert.equal(path.createSVGPathSegLinetoHorizontalRel(1).pathSegTypeAsLetter, "h");
    assert.equal(path.createSVGPathSegLinetoHorizontalRel(1).x, "1");
    assert.equal(path.createSVGPathSegLinetoVerticalAbs(1).pathSegType, SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS);
    assert.equal(path.createSVGPathSegLinetoVerticalAbs(1).pathSegTypeAsLetter, "V");
    assert.equal(path.createSVGPathSegLinetoVerticalAbs(1).y, "1");
    assert.equal(path.createSVGPathSegLinetoVerticalRel(1).pathSegType, SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL);
    assert.equal(path.createSVGPathSegLinetoVerticalRel(1).pathSegTypeAsLetter, "v");
    assert.equal(path.createSVGPathSegLinetoVerticalRel(1).y, "1");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).pathSegType, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS);
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).pathSegTypeAsLetter, "S");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).x, "1");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).y, "2");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).x2, "3");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothAbs(1, 2, 3, 4).y2, "4");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).pathSegType, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL);
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).pathSegTypeAsLetter, "s");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).x, "1");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).y, "2");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).x2, "3");
    assert.equal(path.createSVGPathSegCurvetoCubicSmoothRel(1, 2, 3, 4).y2, "4");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothAbs(1, 2).pathSegType, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS);
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothAbs(1, 2).pathSegTypeAsLetter, "T");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothAbs(1, 2).x, "1");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothAbs(1, 2).y, "2");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothRel(1, 2).pathSegType, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL);
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothRel(1, 2).pathSegTypeAsLetter, "t");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothRel(1, 2).x, "1");
    assert.equal(path.createSVGPathSegCurvetoQuadraticSmoothRel(1, 2).y, "2");
});

// LayoutTests/svg/dom/svg2-inheritance.html
QUnit.test("Validate the path seg inheritance model", function(assert) {
    function checkParent(type, expectedParent) {
        assert.ok(window[type]);
        var parentPrototype = window[type].prototype.__proto__;
        var expectedPrototype = window[expectedParent] ? window[expectedParent].prototype : null;

        assert.equal(parentPrototype, expectedPrototype);
    }

    checkParent("SVGPathSeg", "Object");
    checkParent("SVGPathSegArcAbs", "SVGPathSeg");
    checkParent("SVGPathSegArcRel", "SVGPathSeg");
    checkParent("SVGPathSegClosePath", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoCubicAbs", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoCubicRel", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoCubicSmoothAbs", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoCubicSmoothRel", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoQuadraticAbs", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoQuadraticRel", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoQuadraticSmoothAbs", "SVGPathSeg");
    checkParent("SVGPathSegCurvetoQuadraticSmoothRel", "SVGPathSeg");
    checkParent("SVGPathSegLinetoAbs", "SVGPathSeg");
    checkParent("SVGPathSegLinetoHorizontalAbs", "SVGPathSeg");
    checkParent("SVGPathSegLinetoHorizontalRel", "SVGPathSeg");
    checkParent("SVGPathSegLinetoRel", "SVGPathSeg");
    checkParent("SVGPathSegLinetoVerticalAbs", "SVGPathSeg");
    checkParent("SVGPathSegLinetoVerticalRel", "SVGPathSeg");
    checkParent("SVGPathSegList", "Object");
    checkParent("SVGPathSegMovetoAbs", "SVGPathSeg");
    checkParent("SVGPathSegMovetoRel", "SVGPathSeg");
});

QUnit.test("Validate the pathSegList inheritance model", function(assert) {
    var path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    assert.ok(path.pathSegList instanceof SVGPathSegList);
});

// LayoutTests/svg/dom/SVGPathSegList-appendItem.xhtml
QUnit.test("Validate the pathSegList inheritance model", function(assert) {
    var path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M 0 0 L 100 0 L 100 100");
    assert.equal(path1.pathSegList.numberOfItems, "3");
});
